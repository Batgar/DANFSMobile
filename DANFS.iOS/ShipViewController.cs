// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using UIKit;
using DANFS.Services;
using System.Linq;
using SQLite.Net.Interop;
using MapKit;

namespace DANFS.iOS
{
	public partial class ShipViewController : UIViewController
	{
		public ShipViewController (IntPtr handle) : base (handle)
		{
		}

		public override void ViewDidLoad ()
		{
			base.ViewDidLoad ();

			//this.mainTextView.Text = Ship.Title;

			RefreshWithLocations ();

		}

		async void RefreshWithLocations()
		{
			//Load all the locations for this ship.
			var dataAccess = TinyIoC.TinyIoCContainer.Current.Resolve<IDataAccess>();
			var locations = await dataAccess.GetLocationsForShip (this.Ship);
			mainTextView.Text = string.Join ("\n", locations);

			var shipLocations = await dataAccess.GetRawGeolocationsForShip (this.Ship);

			foreach (var location in shipLocations) {
				if (location.LocationGeocodeResult != null) {
					//Only plot the first result.
					var result = location.LocationGeocodeResult.Results.FirstOrDefault();
					if (result == null) {
						continue;
					}
					var geometry = result.Geometry;
					if (geometry != null && geometry.Viewport != null) {
						var val = geometry.Viewport.Values.FirstOrDefault ();

						if (val == null) {
							continue;
						}

						var lat = val.Lat;
						var longitude = val.Long;

						var annotation = new MKPointAnnotation ();
						annotation.SetCoordinate (new CoreLocation.CLLocationCoordinate2D (lat, longitude));
						annotation.Title = location.Location + "-" + location.PossibleStartDate.GetValueOrDefault () + "-" + location.PossibleEndDate.GetValueOrDefault ();
						this.locationMapView.AddAnnotation (annotation);
						
					}
				}
			}
		}

		public ShipToken Ship {get; set;}


	}
}
